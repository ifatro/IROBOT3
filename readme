
This project recieves two images of any format (tiff, png, bmp, gif, etc.) and extracts the movement of the ROBOT in meters from 
the phase correlation calculation between the images.

The calculation assumes only pitch & yaw movement (no rotation) between the images, therefore only translation change in the image is calculated.

The parameters of the robot, camera and image are defined in a config.h file:

// ROBOT PARAMETERS:

installationCamHeight1 0.1 //meter - height of the camera from the floor.
installationCamTilt1  10   //deg   - Tilt of the camera in respect to the Nadir point (=to the floor)


// CAMERA PARAMETERS
numPixelLength1  500 //[-] //number of pixels in the image length
numPixelWidth1  500  //[-] //number of pixels in the image width

// IMAGE PARAMETERS

fovWidth1   10 //[deg]   //angular size of the image field of view (width)
fovLength1   10  //[deg] //angular size of the image field of view (length)

##################################################################################################################

The classes are depicted as the following

Robot object holds a camera object
Camera object holds an image object

The main function performs:

1. declares a RobotClass object
2. Extract two images in the camera object and calculate the phase correlation between them.
3. Extract the movement in meters from the phase correlation calculation (pixel movement) assuming the given mechanical constant parameters (FOV size, camera height and tilt, etc.)

##################################################################################################################
Example of the main function use:

int  main()
{


  RobotClass IROBOT;
  IROBOT.Camera.PhaseCorrImage();
  IROBOT.extractMovFromPixel();

}

##################################################################################################################

Classes description:

RobotClass

The robot class is the main class in this solution. the Robot class
holds the camera class and has the functionality to translate pixel change in adjacent images to
horizontal and vertical movements using the function extractMovFromPixel()*/
##################################################################################################################

CameraClass

The Camera class is a member of the robot class and holds the Image class.
The main function of the camera class is to perform a phase correlation operation from two images
one image is considered to be the "fixed image" and the second image is the "moving image". the number of movement
pixels is calculated using the PhaseCorr1() function.

PhaseCorr1() was written in matlab.

 This function was then generated to a C AUTOMATIC code using the following functions:
 -PhaseCorr1
 -PhaseCorr1_data
 -PhaseCorr1_initialize
 -PhaseCorr1_rtwutil
 -PhaseCorr1_terminate
 -PhaseCorr1_types
 -relop
 -rt_defines
 -rt_nonfinite
 -rtGetInf
 -rtGetNan
 -rtwtypes
 -tmwtypes
 - fftshift
 - minOrMax
 - relop
 - FFTImplementationCallback
 
##################################################################################################################
 ImageeClass
 
 The image class is a member of the camera class, The main function
of the image class is extractImage() which loads two images at any format (tiff, bmp, png, jpg, etc.) and transforming them
into  grayscale images represented in a matrix of a size of [pixelLength1=500,pixelWidth1=500]
The image size is defined in the configuration file (config.h) and is constant in this solution.
The function that performs this operation is called stb_image.h - v2.27 - public domain image loader.

Images insertion is in the following lines in ImageClass.cpp- one should enter the path of the images

	uint8_t* grayscale_image = stbi_load("C:\\.....\\I1.bmp", &width, &height, &bpp, 3);
	uint8_t* grayscale_image2 = stbi_load("C:\\....\\I2.bmp", &width, &height, &bpp, 3);

##################################################################################################################
